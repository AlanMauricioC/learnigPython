* Notes
try to have a run function

#+begin_src python
def run():
  pass
#+end_src

* Primitive types

- integers
- floating point
- strings
- booleans

** Strings

 Lets return the length of the string and one string is repeated 2 times
#+begin_src python
return len("this is a string"*2+' hey!')
#+end_src

#+RESULTS:
: 37

***  Some string functions
these functions doesn't modify the actual string so, you should save it in some variable

#+begin_src python
name = 'Sanderson'
## to upper case
name.upper()
## capitalize
name.capitalize()
## trim/strip
name.strip()
## lowe case
name.lower()
## replace characters
name.replace('o','a')

#+end_src

* Slices
all the parameters are optional on the slice
#+begin_src python
name = 'Sanderson'

name[0:3]## San
name[1:3]## an
name[:3]## San
name[3:]## derson
## the third parameter are the steps
name[1:7:2]## adr
## you can have negative steps
name[::-1] ## nosrednaS

#+end_src

* Variables

#+begin_src python
numero1=5
numero2=6

return numero1+numero2
#+end_src

#+RESULTS:
: 11

** Parsing
Easy way to parse data

=str(number)= , =int(string)= 

#+begin_src python
string1='23'
number1=int(string1)
return number1
#+end_src

#+RESULTS:
: 23

* Logic and comparison operators 

=and= , =or= , =not= , ====  , =!== , =>= , =<= ,  =>== , =<== ,

* loops
** Break and Continue
to stop a loop
#+begin_src python
  for count in range(100):
    if count%2 != 0:
      continue ## will continue with the next value on the range
      ## using break would stop the loop execution
    print(count)
#+end_src


** While
#+begin_src python
  conditional=true
  while conditional:
    print('print c:')
#+end_src

** For
take a loot at how range works, you can pass multple parameters [[https://docs.python.org/3/library/stdtypes.html?highlight=range#range][range docs]]
#+begin_src python
  for count in range(100):
    print(count)
## or

  for char in name:
    print(char.upper())
#+end_src

* Tuple
tuples are inmutable estructure but very optimized 
#+begin_src python
my_tuple=(1,2,3,4,5)

## my_tuple.append(5) you can't edit tuples
for number in my_tuple:
    print(number)
#+end_src

* Diccionaries
[[file:diccionaries.py][diccionaries example]]

* Examples
[[file:password_generator.py][password generator]]
